// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/application/gateway/payment_gateway_repository.go
//
// Generated by this command:
//
//	mockgen -source=../internal/core/application/gateway/payment_gateway_repository.go -destination=../test/mock/mock_payment_gateway_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/duducv/go-clean-arch/internal/core/application/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentGateway is a mock of PaymentGateway interface.
type MockPaymentGateway struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentGatewayMockRecorder
}

// MockPaymentGatewayMockRecorder is the mock recorder for MockPaymentGateway.
type MockPaymentGatewayMockRecorder struct {
	mock *MockPaymentGateway
}

// NewMockPaymentGateway creates a new mock instance.
func NewMockPaymentGateway(ctrl *gomock.Controller) *MockPaymentGateway {
	mock := &MockPaymentGateway{ctrl: ctrl}
	mock.recorder = &MockPaymentGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentGateway) EXPECT() *MockPaymentGatewayMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockPaymentGateway) CreateTransaction(ctx context.Context, input dto.PaymentTransactionInput) (*dto.PaymentTransactionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, input)
	ret0, _ := ret[0].(*dto.PaymentTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockPaymentGatewayMockRecorder) CreateTransaction(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockPaymentGateway)(nil).CreateTransaction), ctx, input)
}
