// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/domain/entity/event_repository.go
//
// Generated by this command:
//
//	mockgen -source=../internal/core/domain/entity/event_repository.go -destination=../test/mock/mock_event_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/duducv/go-clean-arch/internal/core/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEventRepository) Get(ctx context.Context, eventID string) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, eventID)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEventRepositoryMockRecorder) Get(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventRepository)(nil).Get), ctx, eventID)
}
