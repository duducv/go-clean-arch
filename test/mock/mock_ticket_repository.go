// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/domain/entity/ticket_repository.go
//
// Generated by this command:
//
//	mockgen -source=../internal/core/domain/entity/ticket_repository.go -destination=../test/mock/mock_ticket_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/duducv/go-clean-arch/internal/core/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketRepository is a mock of TicketRepository interface.
type MockTicketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketRepositoryMockRecorder
}

// MockTicketRepositoryMockRecorder is the mock recorder for MockTicketRepository.
type MockTicketRepositoryMockRecorder struct {
	mock *MockTicketRepository
}

// NewMockTicketRepository creates a new mock instance.
func NewMockTicketRepository(ctrl *gomock.Controller) *MockTicketRepository {
	mock := &MockTicketRepository{ctrl: ctrl}
	mock.recorder = &MockTicketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketRepository) EXPECT() *MockTicketRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockTicketRepository) Save(ctx context.Context, ticket entity.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTicketRepositoryMockRecorder) Save(ctx, ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTicketRepository)(nil).Save), ctx, ticket)
}

// Update mocks base method.
func (m *MockTicketRepository) Update(ctx context.Context, ticket entity.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTicketRepositoryMockRecorder) Update(ctx, ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTicketRepository)(nil).Update), ctx, ticket)
}
